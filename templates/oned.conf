# WARNING: This file is a template managed by the opennebula::oned_conf Puppet
# module. Manual changes may be overwritten.

#*******************************************************************************
#                       OpenNebula Configuration file
#*******************************************************************************

#*******************************************************************************
# Daemon configuration attributes
#-------------------------------------------------------------------------------
#  MANAGER_TIMER: Time in seconds the core uses to evaluate periodical functions.
#  HOST_MONITORING_INTERVAL and VM_POLLING_INTERVAL can not have smaller values
#  than MANAGER_TIMER.
#
#  HOST_MONITORING_INTERVAL: Time in seconds between host monitorization.
#
#  VM_POLLING_INTERVAL: Time in seconds between virtual machine monitorization.
#  (use 0 to disable VM monitoring).
#
#  VM_DIR: Remote path to store the VM images, it should be shared between all
#  the cluster nodes to perform live migrations. This variable is the default
#  for all the hosts in the cluster.
#
#  PORT: Port where oned will listen for xmlrpc calls.
#
#  DB: Configuration attributes for the database backend
#   backend : can be sqlite or mysql (default is sqlite)
#   server  : (mysql) host name or an IP address for the MySQL server
#   port    : (mysql) port for the connection to the server.
#                     If set to 0, the default port is used.
#   user    : (mysql) user's MySQL login ID
#   passwd  : (mysql) the password for user
#   db_name : (mysql) the database name
#
#  VNC_BASE_PORT: VNC ports for VMs can be automatically set to VNC_BASE_PORT +
#  VMID
#
#  DEBUG_LEVEL: 0 = ERROR, 1 = WARNING, 2 = INFO, 3 = DEBUG
#*******************************************************************************

MANAGER_TIMER            = <%= manager_timer %>
HOST_MONITORING_INTERVAL = <%= host_monitoring_interval %>
VM_POLLING_INTERVAL      = <%= vm_polling_interval %>
VM_DIR                   = <%= vm_dir %>
SCRIPTS_REMOTE_DIR       = <%= scripts_remote_dir %>
PORT                     = <%= port %>
VNC_BASE_PORT            = <%= vnc_base_port %>
DEBUG_LEVEL              = <%= debug_level %>

#---------------------Database Configuration------------------------------------
<% if db_backend == "sqlite" -%>
DB                       = [ backend = "sqlite" ]
<% else -%>
DB                       = [ backend = "<%= db_backend %>",
                             server  = "<%= db_server %>",
                             port    = "<%= db_port %>",
                             user    = "<%= db_user %>",
                             passwd  = "<%= db_passwd %>",
                             db_name = "<%= db_name %>" ]
<% end -%>
#-------------------------------------------------------------------------------

#*******************************************************************************
# Physical Networks configuration
#*******************************************************************************
#  NETWORK_SIZE: Here you can define the default size for the virtual networks
#
#  MAC_PREFIX: Default MAC prefix to be used to create the auto-generated MAC
#  addresses is defined here (this can be overrided by the Virtual Network
#  template)
#*******************************************************************************

NETWORK_SIZE             = <%= network_size %>
MAC_PREFIX               = "<%= mac_prefix %>"

#*******************************************************************************
# Image Repository Configuration
#*******************************************************************************
#  IMAGE_REPOSITORY_PATH: Define the path to the image repository, by default
#  is set to $ONE_LOCATION/var
#
#  DEFAULT_IMAGE_TYPE: This can take values
#       OS        Image file holding an operating system
#       CDROM     Image file holding a CDROM
#       DATABLOCK Image file holding a datablock,
#                 always created as an empty block
#  DEFAULT_DEVICE_PREFIX: This can be set to
#       hd        IDE prefix
#       sd        SCSI
#       xvd       XEN Virtual Disk
#       vd        KVM virtual disk
#*******************************************************************************

IMAGE_REPOSITORY_PATH     = <%= image_repository_path %>
DEFAULT_IMAGE_TYPE        = "<%= default_image_type %>"
DEFAULT_DEVICE_PREFIX     = "<%= default_device_prefix %>"

#*******************************************************************************
# Information Driver Configuration
#*******************************************************************************
# You can add more information managers with different configurations but make
# sure it has different names.
#
#   name      : name for this information manager
#
#   executable: path of the information driver executable, can be an
#               absolute path or relative to $ONE_LOCATION/lib/mads (or
#               /usr/lib/one/mads/ if OpenNebula was installed in /)
#
#   arguments : for the driver executable, usually a probe configuration file,
#               can be an absolute path or relative to $ONE_LOCATION/etc (or
#               /etc/one/ if OpenNebula was installed in /)
#*******************************************************************************

#-------------------------------------------------------------------------------
#  KVM Information Driver Manager Configuration
#-------------------------------------------------------------------------------
IM_MAD = [
      name       = "im_kvm",
      executable = "one_im_ssh",
      arguments  = "kvm" ]
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
#  XEN Information Driver Manager Configuration
#-------------------------------------------------------------------------------
IM_MAD = [
    name       = "im_xen",
    executable = "one_im_ssh",
    arguments  = "xen" ]
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
#  EC2 Information Driver Manager Configuration
#-------------------------------------------------------------------------------
IM_MAD = [
      name       = "im_ec2",
      executable = "one_im_ec2",
      arguments  = "im_ec2/im_ec2.conf" ]
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
#  Dummy Information Driver Manager Configuration
#-------------------------------------------------------------------------------
IM_MAD = [ name="im_dummy", executable="one_im_dummy"]
#-------------------------------------------------------------------------------

#*******************************************************************************
# Virtualization Driver Configuration
#*******************************************************************************
# You can add more virtualization managers with different configurations but
# make sure it has different names.
#
#   name      : name of the virtual machine manager driver
#
#   executable: path of the virtualization driver executable, can be an
#               absolute path or relative to $ONE_LOCATION/lib/mads (or
#               /usr/lib/one/mads/ if OpenNebula was installed in /)
#
#   arguments : for the driver executable
#
#   default   : default values and configuration parameters for the driver, can
#               be an absolute path or relative to $ONE_LOCATION/etc (or
#               /etc/one/ if OpenNebula was installed in /)
#
#   type      : driver type, supported drivers: xen, kvm, xml
#*******************************************************************************

#-------------------------------------------------------------------------------
#  KVM Virtualization Driver Manager Configuration
#-------------------------------------------------------------------------------
VM_MAD = [
    name       = "vmm_kvm",
    executable = "one_vmm_ssh",
    arguments  = "kvm",
    default    = "vmm_ssh/vmm_ssh_kvm.conf",
    type       = "kvm" ]
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
#  XEN Virtualization Driver Manager Configuration
#-------------------------------------------------------------------------------
VM_MAD = [
    name       = "vmm_xen",
    executable = "one_vmm_ssh",
    arguments  = "xen",
    default    = "vmm_ssh/vmm_ssh_xen.conf",
    type       = "xen" ]
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
#  EC2 Virtualization Driver Manager Configuration
#    arguments: default values for the EC2 driver, can be an absolute path or
#               relative to $ONE_LOCATION/etc (or /etc/one/ if OpenNebula was
#               installed in /).
#-------------------------------------------------------------------------------
VM_MAD = [
    name       = "vmm_ec2",
    executable = "one_vmm_ec2",
    arguments  = "vmm_ec2/vmm_ec2.conf",
    type       = "xml" ]
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
#  Dummy Virtualization Driver Configuration
#-------------------------------------------------------------------------------
#VM_MAD = [ name="vmm_dummy", executable="one_vmm_dummy", type="xml" ]
#-------------------------------------------------------------------------------

#*******************************************************************************
# Transfer Manager Driver Configuration
#*******************************************************************************
# You can add more transfer managers with different configurations but make
# sure it has different names.
#   name      : name for this transfer driver
#
#   executable: path of the transfer driver executable, can be an
#               absolute path or relative to $ONE_LOCATION/lib/mads (or
#               /usr/lib/one/mads/ if OpenNebula was installed in /)
#
#   arguments : for the driver executable, usually a commands configuration file
#               , can be an absolute path or relative to $ONE_LOCATION/etc (or
#               /etc/one/ if OpenNebula was installed in /)
#*******************************************************************************

#-------------------------------------------------------------------------------
# NFS Transfer Manager Driver Configuration
#-------------------------------------------------------------------------------
TM_MAD = [
    name       = "tm_nfs",
    executable = "one_tm",
    arguments  = "tm_nfs/tm_nfs.conf" ]
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# SSH Transfer Manager Driver Configuration
#-------------------------------------------------------------------------------
TM_MAD = [
    name       = "tm_ssh",
    executable = "one_tm",
    arguments  = "tm_ssh/tm_ssh.conf" ]
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Dummy Transfer Manager Driver Configuration
#-------------------------------------------------------------------------------
TM_MAD = [
    name       = "tm_dummy",
    executable = "one_tm",
    arguments  = "tm_dummy/tm_dummy.conf" ]
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# LVM Transfer Manager Driver Configuration
#-------------------------------------------------------------------------------
TM_MAD = [
    name       = "tm_lvm",
    executable = "one_tm",
    arguments  = "tm_lvm/tm_lvm.conf" ]
#-------------------------------------------------------------------------------

#*******************************************************************************
# Hook Manager Configuration
#*******************************************************************************
# The Driver (HM_MAD), used to execute the Hooks
#   executable: path of the hook driver executable, can be an
#               absolute path or relative to $ONE_LOCATION/lib/mads (or
#               /usr/lib/one/mads/ if OpenNebula was installed in /)
#
#   arguments : for the driver executable, can be an absolute path or relative
#               to $ONE_LOCATION/etc (or /etc/one/ if OpenNebula was installed
#               in /)
#
# Virtual Machine Hooks (VM_HOOK) defined by:
#   name      : for the hook, useful to track the hook (OPTIONAL)
#   on        : when the hook should be executed,
#               - CREATE, when the VM is created (onevm create)
#               - RUNNING, after the VM is successfully booted
#               - SHUTDOWN, after the VM is shutdown
#               - STOP, after the VM is stopped (including VM image transfers)
#               - DONE, after the VM is deleted or shutdown
#   command   : path can be absolute or relative to $ONE_LOCATION/share/hooks
#               case of self-contained installation or relative to
#               /usr/share/one/hooks in case of system-wide installation
#   arguments : for the hook. You can access to VM template variables with $
#               - $ATTR, the value of an attribute e.g. $NAME or $VMID
#               - $ATTR[VAR], the value of a vector e.g. $NIC[MAC]
#               - $ATTR[VAR, COND], same of previous but COND select between
#                 multiple ATTRs e.g. $NIC[MAC, NETWORK="Public"]
#   remote    : values,
#               - YES, The hook is executed in the host where the VM was
#                 allocated
#               - NO, The hook is executed in the OpenNebula server (default)
#-------------------------------------------------------------------------------

HM_MAD = [
    executable = "one_hm" ]

#-------------------------------- Image Hook -----------------------------------
# This hook is used to handle image saving and overwriting when virtual machines
# reach the DONE state after being shutdown.

VM_HOOK = [
    name      = "image",
    on        = "DONE",
    command   = "image.rb",
    arguments = "$VMID" ]

#-------------------------------------------------------------------------------

#-------------------------------- Hook Examples --------------------------------
#VM_HOOK = [
#    name      = "dhcp",
#    on        = "create",
#    command   = "/bin/echo",
#    arguments = "$NAME > /tmp/test.$VMID" ]
#-------------------------------------------------------------------------------
#VM_HOOK = [
#    name      = "ebtables",
#    on        = "running",
#    command   = "/usr/local/one/bin/set_net",
#    arguments = '$NIC[MAC, Network = "Private"]',
#    remote    = "yes" ]
#-------------------------------------------------------------------------------
#VM_HOOK = [
#    name      = "mail",
#    on        = "running",
#    command   = "/usr/local/one/bin/send_mail",
#    arguments = "$VMID $NAME",
#    remote    = "no" ]
#------------------------------------------------------------------------------

#-------------------------------- Puppet Hooks --------------------------------
<% if hooks.is_a?(Hash) then -%>
<%   hooks.keys.each do |name,config| -%>
VM_HOOK = [
  name      = "<%= key %>",
  on        = "<%= config["on"] %>",
  command   = "<%= config["command"] %>",
  arguments = "<%= config["arguments"] %>",
  remote    = "<%= config["remote"] %>" ]
#------------------------------------------------------------------------------
<%   end -%>
<% else -%>
# No hooks configured.
#------------------------------------------------------------------------------
<% end -%>

#*******************************************************************************
# Auth Manager Configuration
#*******************************************************************************
# The Driver (AUTHM_MAD) that will be used to authenticate and authorize
# OpenNebula requests. If not defined OpenNebula will use the built-in auth
# policies
#   executable: path of the auth driver executable, can be an
#               absolute path or relative to $ONE_LOCATION/lib/mads (or
#               /usr/lib/one/mads/ if OpenNebula was installed in /)
#
#   arguments : for the driver executable, can be an absolute path or relative
#               to $ONE_LOCATION/etc (or /etc/one/ if OpenNebula was installed
#               in /)
#-------------------------------------------------------------------------------

#AUTH_MAD = [
#    executable = "one_auth_mad" ]

